"""
Hospital Stamp Model for Odoo Integration
"""

from odoo import models, fields, api, _
from odoo.exceptions import UserError, ValidationError
import base64
import logging
import os
import tempfile

_logger = logging.getLogger(__name__)

try:
    from PIL import Image, ImageDraw, ImageFont
except ImportError:
    _logger.warning("PIL/Pillow not available. Hospital stamp generation will not work.")


class HospitalStamp(models.Model):
    _name = 'healthcare.hospital.stamp'
    _description = 'Hospital Stamp Generator'
    _order = 'name desc'
    _rec_name = 'name'

    # Basic Information
    name = fields.Char('Hospital Name', required=True, help="Name of the hospital for the stamp")
    partner_id = fields.Many2one('res.partner', string='Hospital Partner', 
                                help="Link to hospital partner record")
    
    # Stamp Configuration
    size = fields.Integer('Stamp Size (px)', default=300, 
                         help="Size of the stamp in pixels (width and height)")
    
    # Generated Stamp
    stamp_image = fields.Binary('Generated Stamp', readonly=True)
    stamp_filename = fields.Char('Stamp Filename', readonly=True)
    
    # Generation Info
    generated_date = fields.Datetime('Generated Date', readonly=True)
    generated_by = fields.Many2one('res.users', string='Generated By', readonly=True)
    
    # Status
    state = fields.Selection([
        ('draft', 'Draft'),
        ('generated', 'Generated'),
        ('archived', 'Archived')
    ], string='Status', default='draft', tracking=True)
    
    # Additional Info
    notes = fields.Text('Notes')
    active = fields.Boolean('Active', default=True)
    
    @api.constrains('size')
    def _check_size(self):
        """Validate stamp size"""
        for record in self:
            if record.size < 180 or record.size > 500:
                raise ValidationError(_("Stamp size must be between 180 and 500 pixels."))
    
    def action_generate_stamp(self):
        """Generate hospital stamp"""
        self.ensure_one()
        
        if not self.name:
            raise UserError(_("Hospital name is required to generate stamp."))
        
        try:
            # Generate stamp using the hospital stamp generator
            stamp_data = self._generate_hospital_stamp_image()
            
            if stamp_data:
                # Save stamp data
                self.write({
                    'stamp_image': stamp_data,
                    'stamp_filename': f"hospital_stamp_{self.name.lower().replace(' ', '_')}.png",
                    'generated_date': fields.Datetime.now(),
                    'generated_by': self.env.user.id,
                    'state': 'generated'
                })
                
                # Show success message
                return {
                    'type': 'ir.actions.client',
                    'tag': 'display_notification',
                    'params': {
                        'title': _('Success'),
                        'message': _('Hospital stamp generated successfully!'),
                        'type': 'success'
                    }
                }
            else:
                raise UserError(_("Failed to generate stamp. Please check the configuration."))
                
        except Exception as e:
            _logger.error(f"Error generating hospital stamp: {str(e)}")
            raise UserError(_("Error generating stamp: %s") % str(e))
    
    def _generate_hospital_stamp_image(self):
        """Generate hospital stamp image using the stamp generator adapter"""
        try:
            # Import the hospital stamp adapter
            from ..lib.hospital_generator import HospitalStampAdapter
            
            # Create adapter instance
            adapter = HospitalStampAdapter()
            
            if not adapter.is_available():
                raise UserError(_("Hospital stamp generator not available. Please check installation."))
            
            # Generate stamp using adapter
            success, image_base64, error_msg = adapter.generate_stamp(
                hospital_name=self.name,
                size=self.size
            )
            
            if success:
                return image_base64
            else:
                raise UserError(_("Failed to generate stamp: %s") % (error_msg or "Unknown error"))
                    
        except Exception as e:
            _logger.error(f"Error in _generate_hospital_stamp_image: {str(e)}")
            raise
    
    def action_download_stamp(self):
        """Download generated stamp"""
        self.ensure_one()
        
        if not self.stamp_image:
            raise UserError(_("No stamp image available. Please generate the stamp first."))
        
        return {
            'type': 'ir.actions.act_url',
            'url': f'/web/content/{self._name}/{self.id}/stamp_image/{self.stamp_filename}?download=true',
            'target': 'self',
        }
    
    def action_archive(self):
        """Archive stamp"""
        self.write({'state': 'archived', 'active': False})
    
    def action_unarchive(self):
        """Unarchive stamp"""
        self.write({'state': 'generated', 'active': True})
    
    @api.model
    def create_from_partner(self, partner_id):
        """Create hospital stamp from partner"""
        partner = self.env['res.partner'].browse(partner_id)
        if not partner.exists():
            raise UserError(_("Partner not found."))
        
        return self.create({
            'name': partner.name,
            'partner_id': partner.id,
        })


class ResPartner(models.Model):
    _inherit = 'res.partner'
    
    hospital_stamp_ids = fields.One2many('healthcare.hospital.stamp', 'partner_id', 
                                        string='Hospital Stamps')
    hospital_stamp_count = fields.Integer('Stamp Count', compute='_compute_hospital_stamp_count')
    
    @api.depends('hospital_stamp_ids')
    def _compute_hospital_stamp_count(self):
        for partner in self:
            partner.hospital_stamp_count = len(partner.hospital_stamp_ids)
    
    def action_create_hospital_stamp(self):
        """Create hospital stamp for this partner"""
        self.ensure_one()
        
        if not self.is_company:
            raise UserError(_("Only companies can have hospital stamps."))
        
        return {
            'type': 'ir.actions.act_window',
            'name': _('Create Hospital Stamp'),
            'res_model': 'healthcare.hospital.stamp',
            'view_mode': 'form',
            'context': {
                'default_name': self.name,
                'default_partner_id': self.id,
            },
            'target': 'current',
        }