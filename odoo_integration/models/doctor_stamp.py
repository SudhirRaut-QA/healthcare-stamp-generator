"""
Doctor Stamp Model for Odoo Integration
"""

from odoo import models, fields, api, _
from odoo.exceptions import UserError, ValidationError
import base64
import logging
import os
import tempfile

_logger = logging.getLogger(__name__)

try:
    from PIL import Image, ImageDraw, ImageFont
except ImportError:
    _logger.warning("PIL/Pillow not available. Doctor stamp generation will not work.")


class DoctorStamp(models.Model):
    _name = 'healthcare.doctor.stamp'
    _description = 'Doctor Stamp Generator'
    _order = 'name desc'
    _rec_name = 'name'

    # Basic Information
    name = fields.Char('Doctor Name', required=True, help="Full name of the doctor")
    employee_id = fields.Many2one('hr.employee', string='Employee', 
                                 help="Link to employee record")
    
    # Medical Information
    degree = fields.Char('Medical Degree', required=True, 
                        help="Medical qualifications (e.g., MBBS, MD (Cardiology))")
    registration_number = fields.Char('Registration Number', required=True,
                                     help="Medical registration number (e.g., 'MCI-12345' - 'Reg. No.:' prefix will be auto-added)")
    
    # Stamp Configuration
    width = fields.Integer('Width (px)', default=400, help="Width of the stamp in pixels")
    height = fields.Integer('Height (px)', default=200, help="Height of the stamp in pixels")
    
    # Generated Stamp
    stamp_image = fields.Binary('Generated Stamp', readonly=True)
    stamp_filename = fields.Char('Stamp Filename', readonly=True)
    
    # Generation Info
    generated_date = fields.Datetime('Generated Date', readonly=True)
    generated_by = fields.Many2one('res.users', string='Generated By', readonly=True)
    
    # Status
    state = fields.Selection([
        ('draft', 'Draft'),
        ('generated', 'Generated'),
        ('archived', 'Archived')
    ], string='Status', default='draft', tracking=True)
    
    # Additional Info
    specialization = fields.Char('Specialization', help="Medical specialization")
    department = fields.Char('Department', help="Hospital department")
    notes = fields.Text('Notes')
    active = fields.Boolean('Active', default=True)
    
    @api.constrains('width', 'height')
    def _check_dimensions(self):
        """Validate stamp dimensions"""
        for record in self:
            if record.width < 200 or record.width > 800:
                raise ValidationError(_("Width must be between 200 and 800 pixels."))
            if record.height < 100 or record.height > 400:
                raise ValidationError(_("Height must be between 100 and 400 pixels."))
    
    @api.constrains('registration_number')
    def _check_registration_unique(self):
        """Ensure registration number is unique"""
        for record in self:
            if record.registration_number:
                existing = self.search([
                    ('registration_number', '=', record.registration_number),
                    ('id', '!=', record.id)
                ])
                if existing:
                    raise ValidationError(_("Registration number must be unique."))
    
    def action_generate_stamp(self):
        """Generate doctor stamp"""
        self.ensure_one()
        
        if not all([self.name, self.degree, self.registration_number]):
            raise UserError(_("Doctor name, degree, and registration number are required."))
        
        try:
            # Generate stamp using the doctor stamp generator
            stamp_data = self._generate_doctor_stamp_image()
            
            if stamp_data:
                # Save stamp data
                self.write({
                    'stamp_image': stamp_data,
                    'stamp_filename': f"doctor_stamp_{self.name.lower().replace(' ', '_').replace('.', '')}.png",
                    'generated_date': fields.Datetime.now(),
                    'generated_by': self.env.user.id,
                    'state': 'generated'
                })
                
                # Show success message
                return {
                    'type': 'ir.actions.client',
                    'tag': 'display_notification',
                    'params': {
                        'title': _('Success'),
                        'message': _('Doctor stamp generated successfully!'),
                        'type': 'success'
                    }
                }
            else:
                raise UserError(_("Failed to generate stamp. Please check the configuration."))
                
        except Exception as e:
            _logger.error(f"Error generating doctor stamp: {str(e)}")
            raise UserError(_("Error generating stamp: %s") % str(e))
    
    def _generate_doctor_stamp_image(self):
        """Generate doctor stamp image using the stamp generator adapter"""
        try:
            # Import the doctor stamp adapter
            from ..lib.doctor_generator import DoctorStampAdapter
            
            # Create adapter instance
            adapter = DoctorStampAdapter()
            
            if not adapter.is_available():
                raise UserError(_("Doctor stamp generator not available. Please check installation."))
            
            # Generate stamp using adapter
            success, image_base64, error_msg = adapter.generate_stamp(
                name=self.name,
                degree=self.degree,
                registration_number=self.registration_number,  # Auto-prefix will be added
                width=self.width,
                height=self.height
            )
            
            if success:
                return image_base64
            else:
                raise UserError(_("Failed to generate stamp: %s") % (error_msg or "Unknown error"))
                    
        except Exception as e:
            _logger.error(f"Error in _generate_doctor_stamp_image: {str(e)}")
            raise
    
    def action_download_stamp(self):
        """Download generated stamp"""
        self.ensure_one()
        
        if not self.stamp_image:
            raise UserError(_("No stamp image available. Please generate the stamp first."))
        
        return {
            'type': 'ir.actions.act_url',
            'url': f'/web/content/{self._name}/{self.id}/stamp_image/{self.stamp_filename}?download=true',
            'target': 'self',
        }
    
    def action_preview_stamp(self):
        """Preview generated stamp"""
        self.ensure_one()
        
        if not self.stamp_image:
            raise UserError(_("No stamp image available. Please generate the stamp first."))
        
        return {
            'type': 'ir.actions.act_window',
            'name': _('Stamp Preview'),
            'res_model': 'healthcare.doctor.stamp',
            'res_id': self.id,
            'view_mode': 'form',
            'view_id': self.env.ref('healthcare_stamp.doctor_stamp_preview_form').id,
            'target': 'new',
        }
    
    def action_archive(self):
        """Archive stamp"""
        self.write({'state': 'archived', 'active': False})
    
    def action_unarchive(self):
        """Unarchive stamp"""
        self.write({'state': 'generated', 'active': True})
    
    @api.model
    def create_from_employee(self, employee_id, degree, registration_number):
        """Create doctor stamp from employee"""
        employee = self.env['hr.employee'].browse(employee_id)
        if not employee.exists():
            raise UserError(_("Employee not found."))
        
        return self.create({
            'name': f"Dr. {employee.name}",
            'employee_id': employee.id,
            'degree': degree,
            'registration_number': registration_number,
            'department': employee.department_id.name if employee.department_id else '',
        })
    
    @api.onchange('employee_id')
    def _onchange_employee_id(self):
        """Update doctor name when employee is selected"""
        if self.employee_id:
            if not self.name or self.name == 'Dr. ':
                self.name = f"Dr. {self.employee_id.name}"
            if self.employee_id.department_id:
                self.department = self.employee_id.department_id.name


class HrEmployee(models.Model):
    _inherit = 'hr.employee'
    
    doctor_stamp_ids = fields.One2many('healthcare.doctor.stamp', 'employee_id', 
                                      string='Doctor Stamps')
    doctor_stamp_count = fields.Integer('Stamp Count', compute='_compute_doctor_stamp_count')
    
    # Medical Information
    medical_degree = fields.Char('Medical Degree', help="Medical qualifications")
    medical_registration = fields.Char('Medical Registration', help="Medical registration number")
    medical_specialization = fields.Char('Specialization', help="Medical specialization")
    
    @api.depends('doctor_stamp_ids')
    def _compute_doctor_stamp_count(self):
        for employee in self:
            employee.doctor_stamp_count = len(employee.doctor_stamp_ids)
    
    def action_create_doctor_stamp(self):
        """Create doctor stamp for this employee"""
        self.ensure_one()
        
        return {
            'type': 'ir.actions.act_window',
            'name': _('Create Doctor Stamp'),
            'res_model': 'healthcare.doctor.stamp',
            'view_mode': 'form',
            'context': {
                'default_name': f"Dr. {self.name}",
                'default_employee_id': self.id,
                'default_degree': self.medical_degree or '',
                'default_registration_number': self.medical_registration or '',
                'default_specialization': self.medical_specialization or '',
                'default_department': self.department_id.name if self.department_id else '',
            },
            'target': 'current',
        }
    
    def action_view_doctor_stamps(self):
        """View all doctor stamps for this employee"""
        self.ensure_one()
        
        return {
            'type': 'ir.actions.act_window',
            'name': _('Doctor Stamps'),
            'res_model': 'healthcare.doctor.stamp',
            'view_mode': 'tree,form',
            'domain': [('employee_id', '=', self.id)],
            'context': {
                'default_employee_id': self.id,
                'default_name': f"Dr. {self.name}",
            },
        }